/* 
 * File:   Protocol.hpp
 * Author: dervish
 *
 * Created on February 21, 2021, 8:31 AM
 */

#ifndef PROTOCOL_HPP
#define PROTOCOL_HPP

#define PROTOCOL_VERSION        28
#define Q_rint(x) ((x) > 0 ? (int)((x) + 0.5) : (int)((x) - 0.5))
#define PROTOCOL_VERSION_FTE    (('F'<<0) + ('T'<<8) + ('E'<<16) + ('X' << 24)) //fte extensions
#define PROTOCOL_VERSION_FTE2   (('F'<<0) + ('T'<<8) + ('E'<<16) + ('2' << 24)) //fte extensions.
#define PROTOCOL_VERSION_MVD1   (('M'<<0) + ('V'<<8) + ('D'<<16) + ('1' << 24)) //mvdsv extensions
#define PI 3.14159
#define S2C_CHALLENGE 'c'
#define S2C_CONNECTION 'j'
#define A2A_PING 'k'
#define A2A_ACK 'l'  
#define A2A_NACK 'm'
#define A2A_ECHO 'e'
#define A2C_PRINT 'n'

#define UPDATE_BACKUP   64      // copies of entity_state_t to keep buffered (must be power of two)
#define UPDATE_MASK             (UPDATE_BACKUP - 1)

#define S2M_HEARTBEAT 'a'
#define A2C_CLIENT_COMMAND 'B'
#define S2M_SHUTDOWN 'C'

#define	U_MOREBITS	(1 << 15)

#define DF_ORIGIN 1
#define DF_ANGLES ( 1 << 3)
#define DF_EFFECTS (1 << 6)
#define DF_SKINNUM ( 1 << 7)
#define DF_DEAD ( 1 << 8)
#define DF_GIB ( 1 << 9)
#define DF_WEAPONFRAME (1 << 10)
#define DF_MODEL ( 1 << 11)

#define PF_MSEC ( 1 << 0)
#define PF_COMMAND ( 1 << 1)
#define PF_VELOCITY1 ( 1 << 2)
#define PF_VELOCITY2 ( 1 << 3)
#define PF_VELOCITY3 ( 1 << 4)
#define PF_MODEL ( 1 << 5)
#define PF_SKINNUM ( 1 << 6)
#define PF_EFFECTS ( 1 << 7)
#define PF_WEAPONFRAME ( 1 << 8)
#define PF_DEAD ( 1 << 9)
#define PF_GIB ( 1 << 10)

#define CM_ANGLE1 ( 1 << 0)
#define CM_ANGLE3 ( 1 << 1)
#define CM_FORWARD ( 1 << 2 )
#define CM_SIDE ( 1 << 3) 
#define CM_UP ( 1 << 4)
#define CM_BUTTONS ( 1 << 5)
#define CM_IMPULSE ( 1 << 6)
#define CM_ANGLE2 ( 1 << 7)
#define CM_WEAPONS ( 1 << 8)

//==============================================

// the first 16 bits of a packetentities update holds 9 bits of entity number and 7 bits of flags
#define U_ORIGIN1       (1 << 9)
#define U_ORIGIN2       (1 << 10)
#define U_ORIGIN3       (1 << 11)
#define U_ANGLE2        (1 << 12)
#define U_FRAME         (1 << 13)
#define U_REMOVE        (1 << 14)       // REMOVE this entity, don't add it
#define U_MOREBITS      (1 << 15)

// if MOREBITS is set, these additional flags are read in next
#define U_ANGLE1        (1 << 0)
#define U_ANGLE3        (1 << 1)
#define U_MODEL         (1 << 2)
#define U_COLORMAP      (1 << 3)
#define U_SKIN          (1 << 4)
#define U_EFFECTS       (1 << 5)
#define U_SOLID         (1 << 6)        // the entity should be solid for prediction

//==================
// note that there are some defs.qc that mirror to these numbers
// also related to svc_strings[] in cl_parse
//==================

// server to client
#define svc_bad     0
#define svc_nop     1
#define svc_disconnect   2
#define svc_updatestat   3  // [byte] [byte]
#define nq_svc_version   4  // [long] server version
#define nq_svc_setview   5  // [short] entity number
#define svc_sound    6  // <see code>
#define nq_svc_time    7  // [float] server time
#define svc_print    8  // [byte] id [string] null terminated string
#define svc_stufftext   9  // [string] stuffed into client's console buffer
// the string should be \n terminated
#define svc_setangle   10  // [angle3] set the view angle to this absolute value

#define svc_serverdata   11  // [long] protocol ...
#define svc_lightstyle   12  // [byte] [string]
#define nq_svc_updatename  13  // [byte] [string]
#define svc_updatefrags   14  // [byte] [short]
#define nq_svc_clientdata  15  // <shortbits + data>
#define svc_stopsound   16  // <see code>
#define nq_svc_updatecolors  17  // [byte] [byte] [byte]
#define nq_svc_particle   18  // [vec3] <variable>
#define svc_damage    19

#define svc_spawnstatic   20
#define svc_fte_spawnstatic2 21  // @!@!@!
#define svc_spawnbaseline  22

#define svc_temp_entity   23  // variable
#define svc_setpause   24  // [byte] on / off
#define nq_svc_signonnum  25  // [byte]  used for the signon sequence

#define svc_centerprint   26  // [string] to put in center of the screen

#define svc_killedmonster  27
#define svc_foundsecret   28

#define svc_spawnstaticsound 29  // [coord3] [byte] samp [byte] vol [byte] aten

#define svc_intermission  30  // [vec3_t] origin [vec3_t] angle
#define svc_finale    31  // [string] text

#define svc_cdtrack    32  // [byte] track
#define svc_sellscreen   33

#define nq_svc_cutscene   34  // same as svc_smallkick

#define svc_smallkick   34  // set client punchangle to 2
#define svc_bigkick    35  // set client punchangle to 4

#define svc_updateping   36  // [byte] [short]
#define svc_updateentertime  37  // [byte] [float]

#define svc_updatestatlong  38  // [byte] [long]

#define svc_muzzleflash   39  // [short] entity

#define svc_updateuserinfo  40  // [byte] slot [long] uid
// [string] userinfo

#define svc_download   41  // [short] size [size bytes]
#define svc_playerinfo   42  // variable
#define svc_nails    43  // [byte] num [48 bits] xyzpy 12 12 12 4 8 
#define svc_chokecount   44  // [byte] packets choked
#define svc_modellist   45  // [strings]
#define svc_soundlist   46  // [strings]
#define svc_packetentities  47  // [...]
#define svc_deltapacketentities 48  // [...]
#define svc_maxspeed   49  // maxspeed change, for prediction
#define svc_entgravity   50  // gravity change, for prediction
#define svc_setinfo    51  // setinfo on a client
#define svc_serverinfo   52  // serverinfo
#define svc_updatepl   53  // [byte] [byte]
#define svc_nails2    54  // [byte] num [52 bits] nxyzpy 8 12 12 12 4 8
#define svc_fte_spawnbaseline2  66
#define svc_qizmovoice                  83

#define PORT     27500
#define MAXLINE 2048
#define MAX_INFO_STRING 1024
#define MAX_MSGLEN 1450
#define PACKET_HEADER 8
#define MAX_CLIENTS 32

#define PF_TRANS_Z      (1<<17)

// temp entity events
#define TE_SPIKE                        0
#define TE_SUPERSPIKE           1
#define TE_GUNSHOT                      2
#define TE_EXPLOSION            3
#define TE_TAREXPLOSION         4
#define TE_LIGHTNING1           5
#define TE_LIGHTNING2           6
#define TE_WIZSPIKE                     7
#define TE_KNIGHTSPIKE          8
#define TE_LIGHTNING3           9
#define TE_LAVASPLASH           10
#define TE_TELEPORT                     11
#define TE_BLOOD                        12
#define TE_LIGHTNINGBLOOD       13

#define clc_move 3
#define clc_stringcmd 4
#define clc_delta 5

typedef unsigned char byte;
// this is a 16 bit, non-reflected CRC using the polynomial 0x1021
// and the initial and final xor values shown below...  in other words, the
// CCITT standard CRC used by XMODEM

#define CRC_INIT_VALUE 0xffff
#define CRC_XOR_VALUE 0x0000

static unsigned short crctable[256] = { 0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7, 0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef, 0x1231, 0x0210, 0x3273, 0x2252,
    0x52b5, 0x4294, 0x72f7, 0x62d6, 0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de, 0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485, 0xa56a, 0xb54b, 0x8528, 0x9509,
    0xe5ee, 0xf5cf, 0xc5ac, 0xd58d, 0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4, 0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc, 0x48c4, 0x58e5, 0x6886, 0x78a7,
    0x0840, 0x1861, 0x2802, 0x3823, 0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b, 0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12, 0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e,
    0x9b79, 0x8b58, 0xbb3b, 0xab1a, 0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41, 0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49, 0x7e97, 0x6eb6, 0x5ed5, 0x4ef4,
    0x3e13, 0x2e32, 0x1e51, 0x0e70, 0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78, 0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f, 0x1080, 0x00a1, 0x30c2, 0x20e3,
    0x5004, 0x4025, 0x7046, 0x6067, 0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e, 0x02b1, 0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256, 0xb5ea, 0xa5cb, 0x95a8, 0x8589,
    0xf56e, 0xe54f, 0xd52c, 0xc50d, 0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405, 0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c, 0x26d3, 0x36f2, 0x0691, 0x16b0,
    0x6657, 0x7676, 0x4615, 0x5634, 0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab, 0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3, 0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e,
    0x8bf9, 0x9bd8, 0xabbb, 0xbb9a, 0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45,
    0x3ca2, 0x2c83, 0x1ce0, 0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };
static byte chktbl[1024] = { 0x78, 0xd2, 0x94, 0xe3, 0x41, 0xec, 0xd6, 0xd5, 0xcb, 0xfc, 0xdb, 0x8a, 0x4b, 0xcc, 0x85, 0x01, 0x23, 0xd2, 0xe5, 0xf2, 0x29, 0xa7, 0x45, 0x94, 0x4a, 0x62, 0xe3, 0xa5,
    0x6f, 0x3f, 0xe1, 0x7a, 0x64, 0xed, 0x5c, 0x99, 0x29, 0x87, 0xa8, 0x78, 0x59, 0x0d, 0xaa, 0x0f, 0x25, 0x0a, 0x5c, 0x58, 0xfb, 0x00, 0xa7, 0xa8, 0x8a, 0x1d, 0x86, 0x80, 0xc5, 0x1f, 0xd2, 0x28,
    0x69, 0x71, 0x58, 0xc3, 0x51, 0x90, 0xe1, 0xf8, 0x6a, 0xf3, 0x8f, 0xb0, 0x68, 0xdf, 0x95, 0x40, 0x5c, 0xe4, 0x24, 0x6b, 0x29, 0x19, 0x71, 0x3f, 0x42, 0x63, 0x6c, 0x48, 0xe7, 0xad, 0xa8, 0x4b,
    0x91, 0x8f, 0x42, 0x36, 0x34, 0xe7, 0x32, 0x55, 0x59, 0x2d, 0x36, 0x38, 0x38, 0x59, 0x9b, 0x08, 0x16, 0x4d, 0x8d, 0xf8, 0x0a, 0xa4, 0x52, 0x01, 0xbb, 0x52, 0xa9, 0xfd, 0x40, 0x18, 0x97, 0x37,
    0xff, 0xc9, 0x82, 0x27, 0xb2, 0x64, 0x60, 0xce, 0x00, 0xd9, 0x04, 0xf0, 0x9e, 0x99, 0xbd, 0xce, 0x8f, 0x90, 0x4a, 0xdd, 0xe1, 0xec, 0x19, 0x14, 0xb1, 0xfb, 0xca, 0x1e, 0x98, 0x0f, 0xd4, 0xcb,
    0x80, 0xd6, 0x05, 0x63, 0xfd, 0xa0, 0x74, 0xa6, 0x86, 0xf6, 0x19, 0x98, 0x76, 0x27, 0x68, 0xf7, 0xe9, 0x09, 0x9a, 0xf2, 0x2e, 0x42, 0xe1, 0xbe, 0x64, 0x48, 0x2a, 0x74, 0x30, 0xbb, 0x07, 0xcc,
    0x1f, 0xd4, 0x91, 0x9d, 0xac, 0x55, 0x53, 0x25, 0xb9, 0x64, 0xf7, 0x58, 0x4c, 0x34, 0x16, 0xbc, 0xf6, 0x12, 0x2b, 0x65, 0x68, 0x25, 0x2e, 0x29, 0x1f, 0xbb, 0xb9, 0xee, 0x6d, 0x0c, 0x8e, 0xbb,
    0xd2, 0x5f, 0x1d, 0x8f, 0xc1, 0x39, 0xf9, 0x8d, 0xc0, 0x39, 0x75, 0xcf, 0x25, 0x17, 0xbe, 0x96, 0xaf, 0x98, 0x9f, 0x5f, 0x65, 0x15, 0xc4, 0x62, 0xf8, 0x55, 0xfc, 0xab, 0x54, 0xcf, 0xdc, 0x14,
    0x06, 0xc8, 0xfc, 0x42, 0xd3, 0xf0, 0xad, 0x10, 0x08, 0xcd, 0xd4, 0x11, 0xbb, 0xca, 0x67, 0xc6, 0x48, 0x5f, 0x9d, 0x59, 0xe3, 0xe8, 0x53, 0x67, 0x27, 0x2d, 0x34, 0x9e, 0x9e, 0x24, 0x29, 0xdb,
    0x69, 0x99, 0x86, 0xf9, 0x20, 0xb5, 0xbb, 0x5b, 0xb0, 0xf9, 0xc3, 0x67, 0xad, 0x1c, 0x9c, 0xf7, 0xcc, 0xef, 0xce, 0x69, 0xe0, 0x26, 0x8f, 0x79, 0xbd, 0xca, 0x10, 0x17, 0xda, 0xa9, 0x88, 0x57,
    0x9b, 0x15, 0x24, 0xba, 0x84, 0xd0, 0xeb, 0x4d, 0x14, 0xf5, 0xfc, 0xe6, 0x51, 0x6c, 0x6f, 0x64, 0x6b, 0x73, 0xec, 0x85, 0xf1, 0x6f, 0xe1, 0x67, 0x25, 0x10, 0x77, 0x32, 0x9e, 0x85, 0x6e, 0x69,
    0xb1, 0x83, 0x00, 0xe4, 0x13, 0xa4, 0x45, 0x34, 0x3b, 0x40, 0xff, 0x41, 0x82, 0x89, 0x79, 0x57, 0xfd, 0xd2, 0x8e, 0xe8, 0xfc, 0x1d, 0x19, 0x21, 0x12, 0x00, 0xd7, 0x66, 0xe5, 0xc7, 0x10, 0x1d,
    0xcb, 0x75, 0xe8, 0xfa, 0xb6, 0xee, 0x7b, 0x2f, 0x1a, 0x25, 0x24, 0xb9, 0x9f, 0x1d, 0x78, 0xfb, 0x84, 0xd0, 0x17, 0x05, 0x71, 0xb3, 0xc8, 0x18, 0xff, 0x62, 0xee, 0xed, 0x53, 0xab, 0x78, 0xd3,
    0x65, 0x2d, 0xbb, 0xc7, 0xc1, 0xe7, 0x70, 0xa2, 0x43, 0x2c, 0x7c, 0xc7, 0x16, 0x04, 0xd2, 0x45, 0xd5, 0x6b, 0x6c, 0x7a, 0x5e, 0xa1, 0x50, 0x2e, 0x31, 0x5b, 0xcc, 0xe8, 0x65, 0x8b, 0x16, 0x85,
    0xbf, 0x82, 0x83, 0xfb, 0xde, 0x9f, 0x36, 0x48, 0x32, 0x79, 0xd6, 0x9b, 0xfb, 0x52, 0x45, 0xbf, 0x43, 0xf7, 0x0b, 0x0b, 0x19, 0x19, 0x31, 0xc3, 0x85, 0xec, 0x1d, 0x8c, 0x20, 0xf0, 0x3a, 0xfa,
    0x80, 0x4d, 0x2c, 0x7d, 0xac, 0x60, 0x09, 0xc0, 0x40, 0xee, 0xb9, 0xeb, 0x13, 0x5b, 0xe8, 0x2b, 0xb1, 0x20, 0xf0, 0xce, 0x4c, 0xbd, 0xc6, 0x04, 0x86, 0x70, 0xc6, 0x33, 0xc3, 0x15, 0x0f, 0x65,
    0x19, 0xfd, 0xc2, 0xd3,

// Only the first 512 bytes of the table are initialized, the rest
// is just zeros.
// This is an idiocy in QW but we can't change this, or checksums
// will not match.
    };

struct Command {
  int angles[3];
  short forwardMove;
  short sideMove;
  short upMove;
  byte buttons;
  byte impulse;
  byte msec;
};

// stats are integers communicated to the client by the server
#define MAX_CL_STATS            32

#define STAT_HEALTH             0
//define STAT_FRAGS             1
#define STAT_WEAPON             2
#define STAT_AMMO               3
#define STAT_ARMOR              4
//define STAT_WEAPONFRAME       5
#define STAT_SHELLS             6
#define STAT_NAILS              7
#define STAT_ROCKETS            8
#define STAT_CELLS              9
#define STAT_ACTIVEWEAPON       10
#define STAT_TOTALSECRETS       11
#define STAT_TOTALMONSTERS      12
#define STAT_SECRETS            13              // bumped on client side by svc_foundsecret
#define STAT_MONSTERS           14              // bumped by svc_killedmonster
#define STAT_ITEMS              15
#define STAT_VIEWHEIGHT         16              // Z_EXT_VIEWHEIGHT protocol extension
#define STAT_TIME               17              // Z_EXT_TIME extension
#define STAT_MATCHSTARTTIME     18              // Server should send this as msec (int)

typedef union {
  int b4;
  float f;
  short b2;
  char b[4];
} CoordData;

#endif /* PROTOCOL_HPP */

